apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-groovy-init-scripts
  namespace: jenkins-build
data:
  01-user.groovy: |
    import jenkins.model.*
    import hudson.security.*

    def env = System.getenv()

    def instance = Jenkins.getInstance()

    def hudsonRealm = new HudsonPrivateSecurityRealm(false)
    hudsonRealm.createAccount(env.JENKINS_USER, env.JENKINS_PASS)
    instance.setSecurityRealm(hudsonRealm)

    def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
    
    strategy.setAllowAnonymousRead(false)
    instance.setAuthorizationStrategy(strategy)

    instance.save()

  02-jenkins-set-email-and-url.groovy: |
    import jenkins.model.*
    import jenkins.model.JenkinsLocationConfiguration

    def env = System.getenv()

    def jkLoConf = JenkinsLocationConfiguration.get()

    jkLoConf.setUrl(env.JENKINS_URL)
    jkLoConf.setAdminAddress(env.JENKINS_EMAIL)

    jkLoConf.save()

  03-cloud-kubernetes.groovy: |
    import org.csanchez.jenkins.plugins.kubernetes.*
    import jenkins.model.*

    def instance = Jenkins.getInstance()
    
    instance.setNumExecutors(0)

    def cloud = new KubernetesCloud(
      'kubernetes',
      null,
      'https://kubernetes.default:443',
      'jenkins-build',
      'http://jenkins.jenkins-build:8080/',
      '10', 0, 0, 5
    )
    cloud.setSkipTlsVerify(true)
    cloud.setMaxRequestsPerHost(30)

    instance.clouds.replace(cloud)
    instance.save()

  04-srdosb-multibranch-pipeline.groovy: |
    /* Adds a multibranch pipeline job to Jenkins */
    import hudson.model.*
    import hudson.plugins.git.extensions.impl.UserIdentity
    import hudson.util.PersistedList
    import jenkins.*
    import jenkins.branch.*
    import jenkins.model.*
    import jenkins.model.Jenkins
    import jenkins.plugins.git.*
    import jenkins.plugins.git.traits.*
    import jenkins.scm.impl.trait.RegexSCMHeadFilterTrait
    import com.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger
    import org.jenkinsci.plugins.workflow.multibranch.*

    def env = System.getenv()

    Jenkins jenkins = Jenkins.instance

    String jenkinsJobName = "srdosb"

    def dirName = jenkins.getItem(jenkinsJobName)
    if (dirName == null) {
      dirName = jenkins.createProject(WorkflowMultiBranchProject.class, jenkinsJobName)
    }

    String sourceScript = "Jenkinsfile"
    dirName.getProjectFactory().setScriptPath(sourceScript)

    String remote = env.SRDOSB_CODE_COMMIT_SOURCE_URL
    GitSCMSource gitSCMSource = new GitSCMSource(remote)
    BranchSource branchSource = new BranchSource(gitSCMSource)


    PersistedList sources = dirName.getSourcesList()
    sources.clear()
    sources.add(branchSource)


    def traits = []
    traits.add(new BranchDiscoveryTrait())
    gitSCMSource.setTraits(traits)

    dirName.addTrigger(new PeriodicFolderTrigger("1m"))

  05-aws-access-key.groovy: |
    import jenkins.model.Jenkins
    import com.cloudbees.plugins.credentials.domains.Domain
    import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl
    import com.cloudbees.plugins.credentials.CredentialsScope
    import hudson.util.Secret

    def env = System.getenv()

    instance = Jenkins.instance
    domain = Domain.global()
    store = instance.getExtensionList(
      "com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getStore()

    secretText = new StringCredentialsImpl(
      CredentialsScope.GLOBAL,
      "AWS_ACCESS_KEY",
      "AWS Access Key",
      Secret.fromString(env.AWS_ACCESS_KEY)
    )

    store.addCredentials(domain, secretText)

  06-aws-secret-key.groovy: |
    import jenkins.model.Jenkins
    import com.cloudbees.plugins.credentials.domains.Domain
    import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl
    import com.cloudbees.plugins.credentials.CredentialsScope
    import hudson.util.Secret

    def env = System.getenv()

    instance = Jenkins.instance
    domain = Domain.global()
    store = instance.getExtensionList(
      "com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getStore()

    secretText = new StringCredentialsImpl(
      CredentialsScope.GLOBAL,
      "AWS_SECRET_KEY",
      "AWS Secret Key",
      Secret.fromString(env.AWS_SECRET_KEY)
    )

    store.addCredentials(domain, secretText)

  07-docker-hub-username.groovy: |
    import jenkins.model.Jenkins
    import com.cloudbees.plugins.credentials.domains.Domain
    import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl
    import com.cloudbees.plugins.credentials.CredentialsScope
    import hudson.util.Secret

    def env = System.getenv()

    instance = Jenkins.instance
    domain = Domain.global()
    store = instance.getExtensionList(
      "com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getStore()

    secretText = new StringCredentialsImpl(
      CredentialsScope.GLOBAL,
      "DOCKER_HUB_USERNAME",
      "Docker Hub Username",
      Secret.fromString(env.DOCKER_HUB_USERNAME)
    )

    store.addCredentials(domain, secretText)

  08-docker-hub-password.groovy: |
    import jenkins.model.Jenkins
    import com.cloudbees.plugins.credentials.domains.Domain
    import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl
    import com.cloudbees.plugins.credentials.CredentialsScope
    import hudson.util.Secret

    def env = System.getenv()

    instance = Jenkins.instance
    domain = Domain.global()
    store = instance.getExtensionList(
      "com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getStore()

    secretText = new StringCredentialsImpl(
      CredentialsScope.GLOBAL,
      "DOCKER_HUB_PASSWORD",
      "Docker Hub Password",
      Secret.fromString(env.DOCKER_HUB_PASSWORD)
    )

    store.addCredentials(domain, secretText)

  09-target-vm-private-key.groovy: |
    import jenkins.model.Jenkins
    import com.cloudbees.plugins.credentials.domains.Domain
    import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl
    import com.cloudbees.plugins.credentials.CredentialsScope
    import hudson.util.Secret

    def env = System.getenv()

    instance = Jenkins.instance
    domain = Domain.global()
    store = instance.getExtensionList(
      "com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getStore()

    secretText = new StringCredentialsImpl(
      CredentialsScope.GLOBAL,
      "TARGET_VM_PRIVATE_KEY",
      "Target VM Private Key",
      Secret.fromString(env.TARGET_VM_PRIVATE_KEY)
    )

    store.addCredentials(domain, secretText)